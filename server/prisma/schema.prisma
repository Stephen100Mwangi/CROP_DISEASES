// This is your Prisma schema file
// For more details, see: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model User {
  id              Int            @id @default(autoincrement())
  name            String?
  email           String         @unique
  password        String
  role            String // Possible values: "farmer", "admin"
  profilePicture  String?
  analysisHistory Analysis[]     @relation("UserAnalyses")
  notifications   Notification[] @relation("UserNotifications")
  location        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  forumPosts      ForumPost[]
  comments        Comment[]
  imageUploads    ImageUpload[]
}

model Disease {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  cropType    String
  symptoms    String[] // Array of symptoms
  images      String[] // Array of URLs
  causes      String
  treatments  String[] // Array of recommended treatments
  riskLevel   String // "Low", "Moderate", "High"
  lastUpdated DateTime   @default(now())
  analyses    Analysis[]
  alerts      Alert[]
}

model Analysis {
  id                Int           @id @default(autoincrement())
  userId            Int
  user              User          @relation("UserAnalyses", fields: [userId], references: [id])
  imageUrl          String
  analysisDate      DateTime      @default(now())
  detectedDiseaseId Int
  detectedDisease   Disease       @relation(fields: [detectedDiseaseId], references: [id])
  confidenceScore   Float
  recommendations   String[] // Array of recommended actions
  feedbackGiven     Boolean       @default(false)
  imageUploads      ImageUpload[]
}

model ForumPost {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  title      String
  content    String
  imageUrl   String?
  tags       String[]
  comments   Comment[]
  likesCount Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Comment {
  id          Int        @id @default(autoincrement())
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  content     String
  createdAt   DateTime   @default(now())
  forumPostId Int?
  forumPost   ForumPost? @relation(fields: [forumPostId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
  title     String
  message   String
  type      String // "Disease Alert", "Community Update", etc.
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Alert {
  id         Int      @id @default(autoincrement())
  title      String
  message    String
  location   String
  diseaseId  Int
  disease    Disease  @relation(fields: [diseaseId], references: [id])
  validUntil DateTime
  createdAt  DateTime @default(now())
}

model ImageUpload {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  imageUrl   String
  uploadDate DateTime  @default(now())
  status     String // "Pending", "Analyzed", etc.
  analysisId Int?
  analysis   Analysis? @relation(fields: [analysisId], references: [id])
  fileSize   Int
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  senderEmail String   @default("") // Providing a default value
  senderName  String   @default("") // Providing a default value
  receiverId  Int
  content     String
  status      String   @default("sent") // "sent", "delivered", "read"
  timestamp   DateTime @default(now())
}
